@page "/"
@using Azure.Core
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Mvc.TagHelpers
@namespace YsecOps.UI.Pages
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = "_Layout";

    var userAgent = Request.Headers["User-Agent"].ToString().ToLower();

    var isMobile = HttpHeader.Common.MobileProviders.Any(provider => userAgent.Contains(provider));

    var tokens = new ApplicationUserState
            {
                Xsrf = Xsrf.GetAndStoreTokens(HttpContext).RequestToken,
                AccessToken = await HttpContext.GetTokenAsync("access_token"),
                RefreshToken = await HttpContext.GetTokenAsync("refresh_token")
            };
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="preconnect" href="https://cdn.jsdelivr.net" />
    <link rel="preconnect" href="https://www.google.com" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link rel="preconnect" href="https://kit.fontawesome.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
    <link href="https://use.fontawesome.com/releases/v5.15.4/css/all.css" rel="stylesheet">

    <link href="_content/Blazorise/blazorise.css" rel="stylesheet" />
    <link href="_content/Blazorise.Bootstrap5/blazorise.bootstrap5.css" rel="stylesheet" />
    <link href="_content/Blazorise.SpinKit/blazorise.spinkit.css" rel="stylesheet" />
    <link href="_content/Blazorise.LoadingIndicator/blazorise.loadingindicator.css" rel="stylesheet" />
    <link href="_content/Blazorise.TreeView/blazorise.treeview.css" rel="stylesheet" />
    <link href="css/site.css" rel="stylesheet" />
    <link rel="icon" type="image/png" href="favicon.png"/>
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
<component type="typeof(App)" param-InitialState="@tokens" param-IsMobile="@isMobile" render-mode="Server" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ" crossorigin="anonymous" defer></script>
<script src="_content/Blazorise.Animate/blazorise.animate.js?v=1.1.0.0" type="text/javascript" async></script>
<script src="_framework/blazor.server.js" autostart="false" type="text/javascript"></script>
<script type="text/javascript">
    Blazor.start({
        configureSignalR: function (builder) {
            builder.configureLogging("information");
        },
        reconnectionHandler: {
            onConnectionDown: (options, error) => {
                let isReloading = false;

                async function attemptReload() {
                    if (!isReloading) {
                        isReloading = true;

                        const request = new Request({
                            url: '/healthcheck',
                            method: 'GET'
                        });

                        const result = await fetch(request);

                        if (result.status == 200) {
                            document.location.reload();
                        }
                        isReloading = false;
                    }
                }
                setInterval(attemptReload, 1500);
            },
            onConnectionUp: () => console.log("Up, up, and away!")
        },
        reconnectionOptions: {
            maxRetries: 3,
            retryIntervalMilliseconds: 2000
        }
    });

    window.addEventListener('pagehide', () => {
        Blazor.disconnect();
    });
</script>
<script type="text/javascript">
    let homeUrl = '';
    setInterval(function () {
        const elem = document.getElementById("blazor-error-ui");

        if (elem !== null && elem.style.display === 'block') {
            window.location.assign(homeUrl);
        }
    }, 1000);

    window.registerBlazorApp = (url) => homeUrl = url;
</script>
</body>
</html>
