// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YSecOps.Data.EfCore.Contexts;

#nullable disable

namespace YSecOps.Data.EfCore.Migrations
{
    [DbContext(typeof(YoumaconSecurityOpsContext))]
    [Migration("20220624052244_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.BannedList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastSeenAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("BannedList", (string)null);
                });

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FacebookName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("PreferredName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Pronoun_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((14))");

                    b.Property<Guid>("Staff_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LastName", "FirstName" }, "IX_Contacts_LastName_FirstName");

                    b.HasIndex(new[] { "Pronoun_Id" }, "IX_Contacts_Pronoun_Id");

                    b.HasIndex(new[] { "Staff_Id" }, "IX_Contacts_StaffId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.Incident", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FollowUpResponse")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Injuries")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsFollowUpRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("Location_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OpsManager_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordedBy_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RecordedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<Guid>("Shift_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("Location_Id");

                    b.HasIndex("Shift_Id");

                    b.HasIndex(new[] { "OpsManager_Id" }, "IX_Incidents_OpsManagerId");

                    b.HasIndex(new[] { "RecordedBy_Id" }, "IX_Incidents_RecordedBy");

                    b.HasIndex(new[] { "RecordedOn", "Severity" }, "IX_Incidents_Severity");

                    b.ToTable("Incidents");
                });

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<bool>("IsHotel")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.NonStaffPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("IncidentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.Property<int>("PronounId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IncidentId" }, "IX_NonStaffPeople_IncidentId");

                    b.HasIndex(new[] { "LastName", "FirstName" }, "IX_NonStaffPeople_LastName_FirstName");

                    b.HasIndex(new[] { "PronounId" }, "IX_NonStaffPeople_PronounId");

                    b.ToTable("NonStaffPeople");
                });

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.p_AddStartingLocationsResult", b =>
                {
                    b.ToView(null);
                });

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.Pronoun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Pronouns");
                });

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.RadioSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<DateTime?>("CheckedInAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckedOutAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsCharging")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid>("LastStaffToHave_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Location_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RadioNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LastStaffToHave_Id" }, "IX_RadioSchedule_LastStaffId");

                    b.HasIndex(new[] { "Location_Id" }, "IX_RadioSchedule_Location");

                    b.HasIndex(new[] { "RadioNumber" }, "IX_RadioSchedule_RadioNumber");

                    b.ToTable("RadioSchedule", (string)null);
                });

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Role1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Role");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.RoomSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<bool>("IsCurrentlyOccupied")
                        .HasColumnType("bit");

                    b.Property<int>("Keys")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<Guid>("Location_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("ProvidedKeys")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((4))");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Floor", "Number" }, "IX_RoomSchedule_Floor_Number");

                    b.HasIndex(new[] { "Location_Id" }, "IX_RoomSchedule_Location");

                    b.ToTable("RoomSchedule", (string)null);
                });

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.Shift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<DateTime?>("CheckedInAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckedOutAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CurrentLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastReportedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StartingLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CheckedInAt", "CheckedOutAt" }, "IX_Shifts_CheckedInAt_CheckedOutAt");

                    b.HasIndex(new[] { "CurrentLocationId" }, "IX_Shifts_CurrentLocationId");

                    b.HasIndex(new[] { "StaffId" }, "IX_Shifts_StaffId");

                    b.HasIndex(new[] { "StartAt", "EndAt" }, "IX_Shifts_StartAt_EndAt");

                    b.HasIndex(new[] { "StartingLocationId" }, "IX_Shifts_StartingLocationId");

                    b.ToTable("Shifts", (string)null);
                });

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<DateTime?>("BreakEndAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BreakStartAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("IncidentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBlackShirt")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnBreak")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRaveApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("NeedsCrashSpace")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShirtSize")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IncidentId" }, "IX_Staff_IncidentId");

                    b.HasIndex(new[] { "RoomId" }, "IX_Staff_RoomId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.StaffType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("StaffTypes");
                });

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.StaffTypesRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StaffTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("RoleId");

                    b.HasIndex("StaffId");

                    b.HasIndex("StaffTypeId");

                    b.ToTable("StaffTypesRoles");
                });

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.WatchList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastSeenAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("WatchList", (string)null);
                });

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.Contact", b =>
                {
                    b.HasOne("YSecOps.Data.EfCore.Models.Pronoun", "Pronoun")
                        .WithMany("Contacts")
                        .HasForeignKey("Pronoun_Id")
                        .IsRequired()
                        .HasConstraintName("FK_Contacts_Pronouns_Id");

                    b.HasOne("YSecOps.Data.EfCore.Models.Staff", "Staff")
                        .WithMany("Contacts")
                        .HasForeignKey("Staff_Id")
                        .IsRequired()
                        .HasConstraintName("FK_Contacts_Staff_Id");

                    b.Navigation("Pronoun");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.Incident", b =>
                {
                    b.HasOne("YSecOps.Data.EfCore.Models.Location", "Location")
                        .WithMany("Incidents")
                        .HasForeignKey("Location_Id")
                        .IsRequired()
                        .HasConstraintName("FK_Incidents_Locations_LocationId");

                    b.HasOne("YSecOps.Data.EfCore.Models.Staff", "OpsManager")
                        .WithMany("IncidentOpsManagers")
                        .HasForeignKey("OpsManager_Id")
                        .IsRequired()
                        .HasConstraintName("FK_Incidents_Staff_OpsManagerId");

                    b.HasOne("YSecOps.Data.EfCore.Models.Staff", "RecordedBy")
                        .WithMany("IncidentRecordedBies")
                        .HasForeignKey("RecordedBy_Id")
                        .IsRequired()
                        .HasConstraintName("FK_Incidents_Staff_RecordedBy");

                    b.HasOne("YSecOps.Data.EfCore.Models.Shift", "Shift")
                        .WithMany("Incidents")
                        .HasForeignKey("Shift_Id")
                        .IsRequired()
                        .HasConstraintName("FK_Incidents_Shifts_ShiftId");

                    b.Navigation("Location");

                    b.Navigation("OpsManager");

                    b.Navigation("RecordedBy");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.NonStaffPerson", b =>
                {
                    b.HasOne("YSecOps.Data.EfCore.Models.Incident", "Incident")
                        .WithMany("NonStaffPeople")
                        .HasForeignKey("IncidentId")
                        .IsRequired()
                        .HasConstraintName("FK_NonStaff_Incidents_Id");

                    b.HasOne("YSecOps.Data.EfCore.Models.Pronoun", "Pronoun")
                        .WithMany("NonStaffPeople")
                        .HasForeignKey("PronounId")
                        .IsRequired()
                        .HasConstraintName("FK_NonStaff_Pronouns_Id");

                    b.Navigation("Incident");

                    b.Navigation("Pronoun");
                });

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.RadioSchedule", b =>
                {
                    b.HasOne("YSecOps.Data.EfCore.Models.Staff", "LastStaffToHave")
                        .WithMany("RadioSchedules")
                        .HasForeignKey("LastStaffToHave_Id")
                        .IsRequired()
                        .HasConstraintName("FK_RadioSchedule_Staff");

                    b.HasOne("YSecOps.Data.EfCore.Models.Location", "Location")
                        .WithMany("RadioSchedules")
                        .HasForeignKey("Location_Id")
                        .IsRequired()
                        .HasConstraintName("FK_RadioSchedule_Location");

                    b.Navigation("LastStaffToHave");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.Shift", b =>
                {
                    b.HasOne("YSecOps.Data.EfCore.Models.Location", "CurrentLocation")
                        .WithMany("ShiftCurrentLocations")
                        .HasForeignKey("CurrentLocationId")
                        .IsRequired()
                        .HasConstraintName("FK_Shifts_CurrentLocation");

                    b.HasOne("YSecOps.Data.EfCore.Models.Staff", "Staff")
                        .WithMany("Shifts")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK_Shifts_Staff");

                    b.HasOne("YSecOps.Data.EfCore.Models.Location", "StartingLocation")
                        .WithMany("ShiftStartingLocations")
                        .HasForeignKey("StartingLocationId")
                        .IsRequired()
                        .HasConstraintName("FK_Shifts_StartingLocation");

                    b.Navigation("CurrentLocation");

                    b.Navigation("Staff");

                    b.Navigation("StartingLocation");
                });

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.StaffTypesRole", b =>
                {
                    b.HasOne("YSecOps.Data.EfCore.Models.Role", "Role")
                        .WithMany("StaffTypesRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_StaffTypesRoles_Roles");

                    b.HasOne("YSecOps.Data.EfCore.Models.Staff", "Staff")
                        .WithMany("StaffTypesRoles")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK_StaffTypesRoles_Staff");

                    b.HasOne("YSecOps.Data.EfCore.Models.StaffType", "StaffType")
                        .WithMany("StaffTypesRoles")
                        .HasForeignKey("StaffTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_StaffTypesRoles_StaffTypes");

                    b.Navigation("Role");

                    b.Navigation("Staff");

                    b.Navigation("StaffType");
                });

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.Incident", b =>
                {
                    b.Navigation("NonStaffPeople");
                });

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.Location", b =>
                {
                    b.Navigation("Incidents");

                    b.Navigation("RadioSchedules");

                    b.Navigation("ShiftCurrentLocations");

                    b.Navigation("ShiftStartingLocations");
                });

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.Pronoun", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("NonStaffPeople");
                });

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.Role", b =>
                {
                    b.Navigation("StaffTypesRoles");
                });

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.Shift", b =>
                {
                    b.Navigation("Incidents");
                });

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.Staff", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("IncidentOpsManagers");

                    b.Navigation("IncidentRecordedBies");

                    b.Navigation("RadioSchedules");

                    b.Navigation("Shifts");

                    b.Navigation("StaffTypesRoles");
                });

            modelBuilder.Entity("YSecOps.Data.EfCore.Models.StaffType", b =>
                {
                    b.Navigation("StaffTypesRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
